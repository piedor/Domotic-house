/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 01.02.2023 16:05:41

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#define EI_MAX_SCRATCH_BUFFER_COUNT 4
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

constexpr int kTensorArenaSize = 3392;

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_RESHAPE, OP_CONV_2D, OP_MAX_POOL_2D, OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

TfLiteContext ctx{};
TfLiteTensor tflTensors[23];
TfLiteEvalTensor tflEvalTensors[23];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[11];

const TfArray<2, int> tensor_dimension0 = { 2, { 1,1300 } };
const TfArray<1, float> quant0_scale = { 1, { 0.052078746259212494, } };
const TfArray<1, int> quant0_zero = { 1, { -1 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[4] = { 1, 1, 100, 13, };
const TfArray<1, int> tensor_dimension1 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data2[4] = { 1, 100, 1, 8, };
const TfArray<1, int> tensor_dimension2 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data3[4] = { 1, 1, 50, 8, };
const TfArray<1, int> tensor_dimension3 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data4[4] = { 1, 50, 1, 16, };
const TfArray<1, int> tensor_dimension4 = { 1, { 4 } };
const ALIGN(8) int32_t tensor_data5[2] = { -1, 400, };
const TfArray<1, int> tensor_dimension5 = { 1, { 2 } };
const ALIGN(16) int8_t tensor_data6[8*1*3*13] = { 
  /* [0][0][][] */ 16,24,-65,83,50,-82,-70,45,-45,16,-45,100,-18, 127,-65,-35,5,-19,-38,-49,-50,-34,54,1,61,-10, -97,48,1,-15,-70,51,-71,-27,41,64,-69,6,-23, 
  /* [1][0][][] */ 63,-11,-17,-29,56,-10,28,-30,-41,-32,-26,-71,15, 64,6,-18,16,7,23,-7,0,16,-71,-20,11,-39, -4,72,-50,127,48,19,-9,-4,-15,-36,-19,-51,-2, 
  /* [2][0][][] */ -28,-75,-2,45,-54,-53,-17,-23,-29,-117,-31,-27,10, -19,-71,-89,-43,9,-16,-2,-102,45,42,14,-52,-61, -5,-76,-116,21,-41,26,127,-67,20,1,10,-55,1, 
  /* [3][0][][] */ -127,121,-11,55,13,-3,-2,-20,-14,6,23,31,1, 37,41,16,59,22,-54,7,-50,-20,75,-32,13,-8, -2,-43,3,-13,-1,-13,15,-55,-27,32,-53,31,-58, 
  /* [4][0][][] */ 40,77,-2,35,50,-101,-45,-31,-60,38,21,33,-62, 45,25,2,29,-47,39,1,-52,-73,1,-31,-28,-12, -57,-127,88,-17,-31,-9,5,-4,-15,24,98,43,-42, 
  /* [5][0][][] */ -39,-24,-51,-18,-26,-46,-18,-28,50,-28,-58,-70,117, -56,-93,-32,44,46,-127,24,-19,-35,34,39,59,-69, 49,-93,-62,28,76,25,-43,-11,-44,9,39,-89,-65, 
  /* [6][0][][] */ -121,-74,31,-32,-51,-85,-4,39,-39,6,-19,9,-14, -39,-4,86,-14,107,13,-14,-34,77,-56,37,73,-13, -104,-54,127,-102,-36,-91,-65,53,-19,33,33,-9,-59, 
  /* [7][0][][] */ -56,-29,9,36,-3,-19,-79,73,-3,-7,-26,19,40, 39,25,49,-31,53,62,-96,65,19,17,43,81,-19, -64,7,127,2,-43,-29,30,62,-25,-99,40,26,47, 
};
const TfArray<4, int> tensor_dimension6 = { 4, { 8,1,3,13 } };
const TfArray<8, float> quant6_scale = { 8, { 0.0046063102781772614, 0.0058656046167016029, 0.004040704108774662, 0.0053920676000416279, 0.0043016048148274422, 0.0033582425676286221, 0.0032608362380415201, 0.0044755195267498493, } };
const TfArray<8, int> quant6_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int32_t tensor_data7[8] = { -2157, -717, -1779, -775, -1372, -2054, -1966, -1638, };
const TfArray<1, int> tensor_dimension7 = { 1, { 8 } };
const TfArray<8, float> quant7_scale = { 8, { 0.00023989086912479252, 0.00030547333881258965, 0.00021043480955995619, 0.00028081212076358497, 0.0002240221801912412, 0.00017489306628704071, 0.00016982026863843203, 0.00023307945230044425, } };
const TfArray<8, int> quant7_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int8_t tensor_data8[16*1*3*8] = { 
  /* [0][0][][] */ -28,-18,-80,125,-18,-69,28,-48, 71,-45,-127,-21,-53,-72,28,-47, 62,-65,-15,52,34,56,61,-7, 
  /* [1][0][][] */ -123,40,-127,-82,-39,-37,31,-91, -66,-20,-71,26,-107,48,7,-73, 103,108,-12,110,86,23,15,-84, 
  /* [2][0][][] */ -20,95,-66,-51,45,64,-27,-77, 127,-14,-44,106,65,9,-50,-15, 20,-58,-34,-88,45,41,-1,-28, 
  /* [3][0][][] */ -77,-55,62,-20,-63,127,29,69, -52,-89,25,72,-22,35,73,14, -28,-125,51,-15,-78,46,72,50, 
  /* [4][0][][] */ 127,-29,85,-4,99,-25,9,15, -72,-27,-6,-65,-45,-88,-26,73, 112,-101,29,46,-64,28,-32,-4, 
  /* [5][0][][] */ 121,-62,-22,24,100,37,-33,-12, 25,-127,-46,10,60,9,-64,-24, -8,-109,27,-35,30,-13,-59,3, 
  /* [6][0][][] */ 66,8,4,61,-5,34,-41,-16, 40,8,-15,-87,-14,127,-6,-95, -45,73,-21,-52,76,-53,-65,5, 
  /* [7][0][][] */ -78,-101,66,-31,-51,37,79,65, -46,-85,5,-31,7,17,78,-18, -57,-127,8,-45,15,1,-11,79, 
  /* [8][0][][] */ -123,-95,91,-43,-72,3,38,79, -80,-50,-15,-13,12,33,81,84, -85,-127,54,-127,-29,-41,90,39, 
  /* [9][0][][] */ -104,-43,46,-82,66,127,-78,31, -75,20,48,-107,34,93,43,-41, -117,-39,123,6,82,82,3,-22, 
  /* [10][0][][] */ -2,-10,79,-50,-23,-127,-46,-22, 49,-29,16,-14,63,4,17,-79, -15,-40,-46,-100,-49,-47,63,-32, 
  /* [11][0][][] */ -1,-51,-12,-12,-29,-66,46,59, -2,-3,29,-35,-72,-9,-13,127, 6,1,-37,-14,-14,-78,46,101, 
  /* [12][0][][] */ -23,-9,0,-55,21,68,16,-71, -86,-39,127,-61,29,-25,15,20, -39,-19,18,-38,3,47,-2,20, 
  /* [13][0][][] */ -6,-34,-115,90,1,-70,-30,-127, -45,-86,-57,-8,40,-20,-15,-92, -1,-83,-27,107,53,17,38,-79, 
  /* [14][0][][] */ 2,38,29,63,-112,122,-49,-127, 52,68,-108,24,76,-105,-65,-100, -87,72,-9,-62,54,65,-76,-56, 
  /* [15][0][][] */ 15,10,33,9,-38,-48,-68,4, 20,7,72,-31,39,127,39,18, 30,9,61,-11,-11,46,-71,36, 
};
const TfArray<4, int> tensor_dimension8 = { 4, { 16,1,3,8 } };
const TfArray<16, float> quant8_scale = { 16, { 0.0039063766598701477, 0.002935000229626894, 0.0031448511872440577, 0.0029099730309098959, 0.0032468917779624462, 0.0039585558697581291, 0.0031907139346003532, 0.0045667653903365135, 0.0036509863566607237, 0.0036758566275238991, 0.0036174729466438293, 0.0045127342455089092, 0.0047170883044600487, 0.0042342199012637138, 0.0026680270675569773, 0.0044123949483036995, } };
const TfArray<16, int> quant8_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(16) int32_t tensor_data9[16] = { -376, -2148, -2828, -1870, -3165, -2500, -2813, -895, -1196, -990, -995, -1062, -771, 2242, -2847, -2656, };
const TfArray<1, int> tensor_dimension9 = { 1, { 16 } };
const TfArray<16, float> quant9_scale = { 16, { 0.00012060104199917987, 9.0611873019952327e-05, 9.7090567578561604e-05, 8.9839209977071732e-05, 0.00010024085349868983, 0.00012221196084283292, 9.8506483482196927e-05, 0.00014098914107307792, 0.00011271641415078193, 0.00011348423140589148, 0.00011168175842612982, 0.000139321040478535, 0.00014563003787770867, 0.00013072250294499099, 8.23696464067325e-05, 0.00013622328697238117, } };
const TfArray<16, int> quant9_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(16) int8_t tensor_data10[3*400] = { 
  14, -4, -35, 63, 28, -32, -15, 59, 33, -4, 15, 57, 23, -20, -2, 10, -9, 0, 1, 13, -1, -42, 9, 59, 57, -17, 5, 40, -8, -6, -10, 4, -29, 5, -1, -5, 6, 21, -38, 60, 60, -27, 24, 18, -10, -80, -27, 5, 11, 2, 27, 13, 1, -24, -16, 63, 41, -24, -6, 6, -3, -66, 15, -19, 40, -7, -23, 24, 26, 8, -6, 71, 30, -42, 1, 15, -20, -79, -39, 2, 4, 3, -18, -16, 18, -42, -12, 46, 56, -44, 27, 60, 6, -70, 5, -20, -11, -12, -1, 29, -18, -27, -13, 68, 40, -39, -26, 37, 18, -20, -40, 10, -48, -14, -44, 12, 17, -23, 2, 56, 33, -4, -20, 37, -10, -37, -16, -14, -38, -20, -26, 3, 0, -31, -48, 57, 54, -9, -7, 53, 27, -40, -5, 7, -33, -34, -34, 18, 6, -35, -17, 43, 62, -18, 21, 47, -24, -20, -41, -2, -38, 5, -9, -5, -20, -10, -14, 24, 34, -10, -15, 37, 28, -45, 12, -19, -14, -30, -31, 27, 25, -49, -40, 20, 24, 12, 16, 16, 15, -33, -34, -8, -33, -22, -35, 22, -23, -28, 32, 57, 49, 17, -2, 6, 11, -46, 6, 21, -58, -36, 4, 38, -27, -42, 39, 11, 24, 41, -8, -19, 34, -66, 37, 22, -39, -18, 22, 28, -8, -29, 34, 52, 9, 4, 17, 21, 39, -45, -2, 31, -44, -31, 1, 1, 23, -18, -10, 13, 29, 17, -37, -4, -7, -73, 8, 12, -50, 1, -5, 9, -21, -5, 26, 16, 30, 22, -4, 28, 37, -51, 5, 23, -47, -39, -3, -4, -13, -21, 1, 24, 5, 23, 4, -12, 38, -42, -27, -11, -8, -58, -23, -13, -39, -11, -34, 9, -5, 21, -10, 6, 7, -45, 13, -7, -41, -31, -1, 39, 35, -26, -37, 14, 17, 53, 30, -7, 36, -36, -27, 10, -34, -27, -70, -2, -39, 6, -8, 2, 16, 52, -9, -8, 48, -29, -34, 0, -34, -53, -44, 22, -12, -12, -29, 24, 8, 71, 32, 35, 52, -42, -21, 12, -21, -32, -57, 39, -50, 4, -26, -18, 33, 41, 36, 14, -16, 5, -35, 7, -4, -14, -75, 43, -36, -58, -12, 24, 14, 42, 25, 2, 46, 15, 24, 7, 14, -35, -61, 61, -26, -63, 16, 32, 50, 86, 5, 58, 82, 31, -81, 20, 
  -11, 27, 37, -58, 8, 48, 3, -26, -29, 21, -34, -8, 33, -8, -17, 23, -59, 0, -2, -1, 27, -8, 10, -40, -40, 32, -35, 0, 12, -62, 22, 25, 3, 13, 75, 7, 11, 12, -20, -10, -24, 4, -9, 2, -1, -18, -14, 48, -22, -49, -73, -2, -13, -4, 18, -32, -40, 40, 13, -24, 26, -45, -8, 38, -17, -7, 18, -35, 8, -25, 21, -29, -46, 7, 14, 2, 37, -59, -17, 41, -3, -38, 29, 17, -5, -13, 23, 20, -37, 20, -15, -8, 13, -48, 12, 21, -25, -38, -13, 9, 21, -11, 18, 16, 17, 21, -18, -2, 20, -72, -17, 28, -51, -15, -19, -1, 4, 11, 3, -17, -27, 23, 19, -22, 38, -84, 36, 24, -8, -26, 5, 4, -8, 8, 13, 3, 18, 16, 37, -45, 22, -94, -21, 17, -32, 9, 8, 18, -22, 2, 23, 35, 24, 33, -26, 5, 37, -57, -3, 41, -29, 8, 17, 12, -14, -5, 41, 5, 14, 21, 7, -6, 26, -82, 36, 20, -15, 7, 27, -36, -2, 0, 17, 3, -21, 6, -12, 6, 11, -76, 9, 35, -10, 6, 39, -37, 19, -17, -16, -55, -47, -44, 47, 7, -5, -111, 5, 16, 61, 2, 5, 37, -25, -17, -23, -4, 18, -99, 1, 16, -80, 36, -41, -89, 40, -30, -52, 21, -27, -31, -28, 36, 23, -30, -23, 33, -31, 26, -12, -70, 29, -9, -19, 13, -9, 28, -48, 20, 25, 7, 32, -9, 5, 56, -48, -70, 26, -22, -48, 11, -45, 11, -39, 54, 56, -26, 26, 26, -3, 32, -57, -70, 23, 8, -99, -6, -16, -57, -11, 18, 46, -22, 23, -13, 21, 4, -17, -48, 13, -19, 11, -16, -12, -32, 5, -2, -3, -33, 2, -16, -10, -11, -11, -16, -4, 0, -127, -17, -26, -27, -4, 6, 13, 22, -5, -42, 1, 11, -10, -23, 1, 39, 42, 17, -17, -24, -9, -47, 5, -19, 13, -44, 7, 24, -7, -7, 16, 17, 11, 7, 23, 16, 23, -20, -21, -30, 19, -30, -31, 26, -34, 25, 29, 27, 37, -43, 31, 2, 13, -44, 5, -59, 9, -4, -20, 26, 6, -27, 47, 37, 57, -33, -6, 5, -41, -70, -57, -66, -10, -50, -61, 69, -26, -12, -1, 29, 70, -22, -22, 23, 20, -66, -30, -67, 21, -23, -96, 11, 61, -41, 
  -31, -47, 4, -8, 3, -9, 17, -36, -22, -36, -8, -61, -45, 30, 40, -61, -9, 54, 6, -20, 4, 56, -32, -38, -65, -4, 1, -38, 5, 66, -20, -26, 20, 21, -11, -28, -23, 0, 41, -56, -59, -8, 2, -22, -28, 40, 15, -10, -20, -2, 21, -9, -37, 23, 15, -37, -33, 7, -31, -47, -43, 60, 10, -8, 11, 70, 18, -1, -1, 51, -16, -58, -31, 16, 3, -49, -3, 83, -1, -13, 6, 50, 25, -28, 17, 34, -12, -32, -18, 6, 27, -28, 21, 84, 28, -2, 12, 54, 30, -22, 9, 43, 14, -56, -50, 24, 2, -25, 5, 88, 27, 17, 39, 40, 29, -11, 19, 33, 17, -10, -57, 5, -10, -11, -17, 96, -4, -30, 31, 38, 25, 8, 27, 59, 0, -20, -59, -7, 21, -18, -6, 56, -11, -7, 26, 46, 0, -11, 25, 36, 6, -47, -26, 31, -7, -27, -23, 52, 15, 11, 38, 24, 23, -27, -18, 38, 10, -36, -28, -10, 13, -3, 4, 84, 24, 5, 30, -23, -6, 9, 9, 60, 2, -44, -24, -21, -18, -43, -10, 58, 3, -28, 50, 24, -1, -9, -40, 41, 23, 24, -30, 9, -29, -21, -30, 86, 6, -14, -3, 41, 22, -40, 8, 53, 41, -14, -44, 25, 37, -31, 27, 14, 19, 18, -7, 16, 21, -22, 49, 62, -25, -14, -49, -11, 17, 22, -6, 6, 1, 28, 29, 59, 15, -6, 28, 24, 35, -67, -57, -4, 19, -10, 3, 29, 42, 56, 38, 50, 62, 3, 50, 74, 27, -38, -7, 2, 45, 8, 4, 25, 38, 27, 49, 54, 40, 7, 82, 40, 13, -33, -38, -25, 10, -15, -30, 31, 59, 14, 26, 49, 37, 0, 84, 48, 33, -21, -32, -34, 11, 29, -12, 13, 34, 27, 23, 49, 63, 23, 38, 74, 67, 7, -34, -29, -17, -2, -46, 0, 30, 21, 17, 63, 16, -26, 12, 16, 24, -14, 14, -53, 8, -5, -52, -12, 39, -13, -3, 31, 66, -6, -2, 11, 44, -9, -10, -24, -34, -4, -12, -16, 82, 3, 0, 30, 50, 23, 36, 13, 47, -10, -20, -37, 12, 35, -28, -48, 6, 13, 5, 38, 43, -23, 49, 35, 27, 10, 6, -22, 36, 16, 11, -31, 42, 28, 1, 23, 46, 32, 6, 16, -2, -13, -7, -37, 3, 7, -50, -19, 13, 14, 
};
const TfArray<2, int> tensor_dimension10 = { 2, { 3,400 } };
const TfArray<1, float> quant10_scale = { 1, { 0.0043299212120473385, } };
const TfArray<1, int> quant10_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const ALIGN(8) int32_t tensor_data11[3] = { -448, 94, 619, };
const TfArray<1, int> tensor_dimension11 = { 1, { 3 } };
const TfArray<1, float> quant11_scale = { 1, { 0.0001142415203503333, } };
const TfArray<1, int> quant11_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 0 };
const TfArray<4, int> tensor_dimension12 = { 4, { 1,1,100,13 } };
const TfArray<1, float> quant12_scale = { 1, { 0.052078746259212494, } };
const TfArray<1, int> quant12_zero = { 1, { -1 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const TfArray<4, int> tensor_dimension13 = { 4, { 1,1,100,8 } };
const TfArray<1, float> quant13_scale = { 1, { 0.03087286651134491, } };
const TfArray<1, int> quant13_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const TfArray<4, int> tensor_dimension14 = { 4, { 1,100,1,8 } };
const TfArray<1, float> quant14_scale = { 1, { 0.03087286651134491, } };
const TfArray<1, int> quant14_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const TfArray<4, int> tensor_dimension15 = { 4, { 1,50,1,8 } };
const TfArray<1, float> quant15_scale = { 1, { 0.03087286651134491, } };
const TfArray<1, int> quant15_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const TfArray<4, int> tensor_dimension16 = { 4, { 1,1,50,8 } };
const TfArray<1, float> quant16_scale = { 1, { 0.03087286651134491, } };
const TfArray<1, int> quant16_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const TfArray<4, int> tensor_dimension17 = { 4, { 1,1,50,16 } };
const TfArray<1, float> quant17_scale = { 1, { 0.026384202763438225, } };
const TfArray<1, int> quant17_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 0 };
const TfArray<4, int> tensor_dimension18 = { 4, { 1,50,1,16 } };
const TfArray<1, float> quant18_scale = { 1, { 0.026384202763438225, } };
const TfArray<1, int> quant18_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const TfArray<4, int> tensor_dimension19 = { 4, { 1,25,1,16 } };
const TfArray<1, float> quant19_scale = { 1, { 0.026384202763438225, } };
const TfArray<1, int> quant19_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const TfArray<2, int> tensor_dimension20 = { 2, { 1,400 } };
const TfArray<1, float> quant20_scale = { 1, { 0.026384202763438225, } };
const TfArray<1, int> quant20_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const TfArray<2, int> tensor_dimension21 = { 2, { 1,3 } };
const TfArray<1, float> quant21_scale = { 1, { 0.10247210413217545, } };
const TfArray<1, int> quant21_zero = { 1, { 3 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const TfArray<2, int> tensor_dimension22 = { 2, { 1,3 } };
const TfArray<1, float> quant22_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant22_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const TfLiteReshapeParams opdata0 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs0 = { 2, { 0,1 } };
const TfArray<1, int> outputs0 = { 1, { 12 } };
const TfLiteConvParams opdata1 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 12,6,7 } };
const TfArray<1, int> outputs1 = { 1, { 13 } };
const TfLiteReshapeParams opdata2 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs2 = { 2, { 13,2 } };
const TfArray<1, int> outputs2 = { 1, { 14 } };
const TfLitePoolParams opdata3 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs3 = { 1, { 14 } };
const TfArray<1, int> outputs3 = { 1, { 15 } };
const TfLiteReshapeParams opdata4 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs4 = { 2, { 15,3 } };
const TfArray<1, int> outputs4 = { 1, { 16 } };
const TfLiteConvParams opdata5 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 16,8,9 } };
const TfArray<1, int> outputs5 = { 1, { 17 } };
const TfLiteReshapeParams opdata6 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs6 = { 2, { 17,4 } };
const TfArray<1, int> outputs6 = { 1, { 18 } };
const TfLitePoolParams opdata7 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs7 = { 1, { 18 } };
const TfArray<1, int> outputs7 = { 1, { 19 } };
const TfLiteReshapeParams opdata8 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs8 = { 2, { 19,5 } };
const TfArray<1, int> outputs8 = { 1, { 20 } };
const TfLiteFullyConnectedParams opdata9 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs9 = { 3, { 20,10,11 } };
const TfArray<1, int> outputs9 = { 1, { 21 } };
const TfLiteSoftmaxParams opdata10 = { 1 };
const TfArray<1, int> inputs10 = { 1, { 21 } };
const TfArray<1, int> outputs10 = { 1, { 22 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 1312, (TfLiteIntArray*)&tensor_dimension0, 1300, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 8, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 312, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant6))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data7, (TfLiteIntArray*)&tensor_dimension7, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data8, (TfLiteIntArray*)&tensor_dimension8, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant8))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data9, (TfLiteIntArray*)&tensor_dimension9, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data10, (TfLiteIntArray*)&tensor_dimension10, 1200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant10))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data11, (TfLiteIntArray*)&tensor_dimension11, 12, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant11))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension12, 1300, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant12))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 1312, (TfLiteIntArray*)&tensor_dimension13, 800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant13))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension14, 800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant14))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 800, (TfLiteIntArray*)&tensor_dimension15, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant15))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension16, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant16))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 800, (TfLiteIntArray*)&tensor_dimension17, 800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant17))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension18, 800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant18))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 800, (TfLiteIntArray*)&tensor_dimension19, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant19))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension20, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant20))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 400, (TfLiteIntArray*)&tensor_dimension21, 3, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant21))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension22, 3, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant22))}, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs4, (TfLiteIntArray*)&outputs4, const_cast<void*>(static_cast<const void*>(&opdata4)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs5, (TfLiteIntArray*)&outputs5, const_cast<void*>(static_cast<const void*>(&opdata5)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs6, (TfLiteIntArray*)&outputs6, const_cast<void*>(static_cast<const void*>(&opdata6)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs7, (TfLiteIntArray*)&outputs7, const_cast<void*>(static_cast<const void*>(&opdata7)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs8, (TfLiteIntArray*)&outputs8, const_cast<void*>(static_cast<const void*>(&opdata8)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs9, (TfLiteIntArray*)&outputs9, const_cast<void*>(static_cast<const void*>(&opdata9)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs10, (TfLiteIntArray*)&outputs10, const_cast<void*>(static_cast<const void*>(&opdata10)), OP_SOFTMAX, },
};
static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  if (current_location - bytes < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBuffer(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static TfLiteTensor* GetTensor(const struct TfLiteContext* context,
                               int tensor_idx) {
  return &tflTensors[tensor_idx];
}

static TfLiteEvalTensor* GetEvalTensor(const struct TfLiteContext* context,
                                       int tensor_idx) {
  return &tflEvalTensors[tensor_idx];
}

} // namespace

TfLiteStatus trained_model_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
  ctx.GetScratchBuffer = &GetScratchBuffer;
  ctx.GetTensor = &GetTensor;
  ctx.GetEvalTensor = &GetEvalTensor;
  ctx.tensors = tflTensors;
  ctx.tensors_size = 23;
  for (size_t i = 0; i < 23; ++i) {
    tflTensors[i].type = tensorData[i].type;
    tflEvalTensors[i].type = tensorData[i].type;
    tflTensors[i].is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    tflTensors[i].allocation_type = tensorData[i].allocation_type;
#else
    tflTensors[i].allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
    tflTensors[i].bytes = tensorData[i].bytes;
    tflTensors[i].dims = tensorData[i].dims;
    tflEvalTensors[i].dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    if(tflTensors[i].allocation_type == kTfLiteArenaRw){
      uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

     tflTensors[i].data.data =  start;
     tflEvalTensors[i].data.data =  start;
    }
    else {
       tflTensors[i].data.data = tensorData[i].data;
       tflEvalTensors[i].data.data = tensorData[i].data;
    }
#else
    tflTensors[i].data.data = tensorData[i].data;
    tflEvalTensors[i].data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
    tflTensors[i].quantization = tensorData[i].quantization;
    if (tflTensors[i].quantization.type == kTfLiteAffineQuantization) {
      TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
      tflTensors[i].params.scale = quant->scale->data[0];
      tflTensors[i].params.zero_point = quant->zero_point->data[0];
    }
    if (tflTensors[i].allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tflTensors[i].data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_RESHAPE] = Register_RESHAPE();
  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_MAX_POOL_2D] = Register_MAX_POOL_2D();
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t i = 0; i < 11; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
tflNodes[i].custom_initial_data = nullptr;
      tflNodes[i].custom_initial_data_size = 0;
if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for (size_t i = 0; i < 11; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteTensor* trained_model_input(int index) {
  return &ctx.tensors[inTensorIndices[index]];
}

static const int outTensorIndices[] = {
  22, 
};
TfLiteTensor* trained_model_output(int index) {
  return &ctx.tensors[outTensorIndices[index]];
}

TfLiteStatus trained_model_invoke() {
  for (size_t i = 0; i < 11; ++i) {
    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus trained_model_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
